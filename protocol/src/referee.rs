// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct SSL_Referee {
    // message fields
    packet_timestamp: ::std::option::Option<u64>,
    stage: ::std::option::Option<SSL_Referee_Stage>,
    stage_time_left: ::std::option::Option<i32>,
    command: ::std::option::Option<SSL_Referee_Command>,
    command_counter: ::std::option::Option<u32>,
    command_timestamp: ::std::option::Option<u64>,
    yellow: ::protobuf::SingularPtrField<SSL_Referee_TeamInfo>,
    blue: ::protobuf::SingularPtrField<SSL_Referee_TeamInfo>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for SSL_Referee {}

impl SSL_Referee {
    pub fn new() -> SSL_Referee {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static SSL_Referee {
        static mut instance: ::protobuf::lazy::Lazy<SSL_Referee> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_Referee,
        };
        unsafe {
            instance.get(|| {
                SSL_Referee {
                    packet_timestamp: ::std::option::Option::None,
                    stage: ::std::option::Option::None,
                    stage_time_left: ::std::option::Option::None,
                    command: ::std::option::Option::None,
                    command_counter: ::std::option::Option::None,
                    command_timestamp: ::std::option::Option::None,
                    yellow: ::protobuf::SingularPtrField::none(),
                    blue: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required uint64 packet_timestamp = 1;

    pub fn clear_packet_timestamp(&mut self) {
        self.packet_timestamp = ::std::option::Option::None;
    }

    pub fn has_packet_timestamp(&self) -> bool {
        self.packet_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packet_timestamp(&mut self, v: u64) {
        self.packet_timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_packet_timestamp(&self) -> u64 {
        self.packet_timestamp.unwrap_or(0)
    }

    // required .SSL_Referee.Stage stage = 2;

    pub fn clear_stage(&mut self) {
        self.stage = ::std::option::Option::None;
    }

    pub fn has_stage(&self) -> bool {
        self.stage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stage(&mut self, v: SSL_Referee_Stage) {
        self.stage = ::std::option::Option::Some(v);
    }

    pub fn get_stage(&self) -> SSL_Referee_Stage {
        self.stage.unwrap_or(SSL_Referee_Stage::NORMAL_FIRST_HALF_PRE)
    }

    // optional sint32 stage_time_left = 3;

    pub fn clear_stage_time_left(&mut self) {
        self.stage_time_left = ::std::option::Option::None;
    }

    pub fn has_stage_time_left(&self) -> bool {
        self.stage_time_left.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stage_time_left(&mut self, v: i32) {
        self.stage_time_left = ::std::option::Option::Some(v);
    }

    pub fn get_stage_time_left(&self) -> i32 {
        self.stage_time_left.unwrap_or(0)
    }

    // required .SSL_Referee.Command command = 4;

    pub fn clear_command(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_command(&self) -> bool {
        self.command.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: SSL_Referee_Command) {
        self.command = ::std::option::Option::Some(v);
    }

    pub fn get_command(&self) -> SSL_Referee_Command {
        self.command.unwrap_or(SSL_Referee_Command::HALT)
    }

    // required uint32 command_counter = 5;

    pub fn clear_command_counter(&mut self) {
        self.command_counter = ::std::option::Option::None;
    }

    pub fn has_command_counter(&self) -> bool {
        self.command_counter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command_counter(&mut self, v: u32) {
        self.command_counter = ::std::option::Option::Some(v);
    }

    pub fn get_command_counter(&self) -> u32 {
        self.command_counter.unwrap_or(0)
    }

    // required uint64 command_timestamp = 6;

    pub fn clear_command_timestamp(&mut self) {
        self.command_timestamp = ::std::option::Option::None;
    }

    pub fn has_command_timestamp(&self) -> bool {
        self.command_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command_timestamp(&mut self, v: u64) {
        self.command_timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_command_timestamp(&self) -> u64 {
        self.command_timestamp.unwrap_or(0)
    }

    // required .SSL_Referee.TeamInfo yellow = 7;

    pub fn clear_yellow(&mut self) {
        self.yellow.clear();
    }

    pub fn has_yellow(&self) -> bool {
        self.yellow.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yellow(&mut self, v: SSL_Referee_TeamInfo) {
        self.yellow = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_yellow(&mut self) -> &mut SSL_Referee_TeamInfo {
        if self.yellow.is_none() {
            self.yellow.set_default();
        };
        self.yellow.as_mut().unwrap()
    }

    // Take field
    pub fn take_yellow(&mut self) -> SSL_Referee_TeamInfo {
        self.yellow.take().unwrap_or_else(|| SSL_Referee_TeamInfo::new())
    }

    pub fn get_yellow(&self) -> &SSL_Referee_TeamInfo {
        self.yellow.as_ref().unwrap_or_else(|| SSL_Referee_TeamInfo::default_instance())
    }

    // required .SSL_Referee.TeamInfo blue = 8;

    pub fn clear_blue(&mut self) {
        self.blue.clear();
    }

    pub fn has_blue(&self) -> bool {
        self.blue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blue(&mut self, v: SSL_Referee_TeamInfo) {
        self.blue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blue(&mut self) -> &mut SSL_Referee_TeamInfo {
        if self.blue.is_none() {
            self.blue.set_default();
        };
        self.blue.as_mut().unwrap()
    }

    // Take field
    pub fn take_blue(&mut self) -> SSL_Referee_TeamInfo {
        self.blue.take().unwrap_or_else(|| SSL_Referee_TeamInfo::new())
    }

    pub fn get_blue(&self) -> &SSL_Referee_TeamInfo {
        self.blue.as_ref().unwrap_or_else(|| SSL_Referee_TeamInfo::default_instance())
    }
}

impl ::protobuf::Message for SSL_Referee {
    fn is_initialized(&self) -> bool {
        if self.packet_timestamp.is_none() {
            return false;
        };
        if self.stage.is_none() {
            return false;
        };
        if self.command.is_none() {
            return false;
        };
        if self.command_counter.is_none() {
            return false;
        };
        if self.command_timestamp.is_none() {
            return false;
        };
        if self.yellow.is_none() {
            return false;
        };
        if self.blue.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint64());
                    self.packet_timestamp = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.stage = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_sint32());
                    self.stage_time_left = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.command = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.command_counter = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint64());
                    self.command_timestamp = ::std::option::Option::Some(tmp);
                },
                7 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.yellow));
                },
                8 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.blue));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.packet_timestamp.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.stage.iter() {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        for value in self.stage_time_left.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.command.iter() {
            my_size += ::protobuf::rt::enum_size(4, *value);
        };
        for value in self.command_counter.iter() {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.command_timestamp.iter() {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.yellow.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.blue.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.packet_timestamp {
            try!(os.write_uint64(1, v));
        };
        if let Some(v) = self.stage {
            try!(os.write_enum(2, v.value()));
        };
        if let Some(v) = self.stage_time_left {
            try!(os.write_sint32(3, v));
        };
        if let Some(v) = self.command {
            try!(os.write_enum(4, v.value()));
        };
        if let Some(v) = self.command_counter {
            try!(os.write_uint32(5, v));
        };
        if let Some(v) = self.command_timestamp {
            try!(os.write_uint64(6, v));
        };
        if let Some(v) = self.yellow.as_ref() {
            try!(os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.blue.as_ref() {
            try!(os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<SSL_Referee>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for SSL_Referee {
    fn new() -> SSL_Referee {
        SSL_Referee::new()
    }

    fn descriptor_static(_: ::std::option::Option<SSL_Referee>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "packet_timestamp",
                    SSL_Referee::has_packet_timestamp,
                    SSL_Referee::get_packet_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "stage",
                    SSL_Referee::has_stage,
                    SSL_Referee::get_stage,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "stage_time_left",
                    SSL_Referee::has_stage_time_left,
                    SSL_Referee::get_stage_time_left,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "command",
                    SSL_Referee::has_command,
                    SSL_Referee::get_command,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "command_counter",
                    SSL_Referee::has_command_counter,
                    SSL_Referee::get_command_counter,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "command_timestamp",
                    SSL_Referee::has_command_timestamp,
                    SSL_Referee::get_command_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "yellow",
                    SSL_Referee::has_yellow,
                    SSL_Referee::get_yellow,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "blue",
                    SSL_Referee::has_blue,
                    SSL_Referee::get_blue,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_Referee>(
                    "SSL_Referee",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for SSL_Referee {
    fn clear(&mut self) {
        self.clear_packet_timestamp();
        self.clear_stage();
        self.clear_stage_time_left();
        self.clear_command();
        self.clear_command_counter();
        self.clear_command_timestamp();
        self.clear_yellow();
        self.clear_blue();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for SSL_Referee {
    fn eq(&self, other: &SSL_Referee) -> bool {
        self.packet_timestamp == other.packet_timestamp &&
        self.stage == other.stage &&
        self.stage_time_left == other.stage_time_left &&
        self.command == other.command &&
        self.command_counter == other.command_counter &&
        self.command_timestamp == other.command_timestamp &&
        self.yellow == other.yellow &&
        self.blue == other.blue &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for SSL_Referee {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct SSL_Referee_TeamInfo {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    score: ::std::option::Option<u32>,
    red_cards: ::std::option::Option<u32>,
    yellow_card_times: ::std::vec::Vec<u32>,
    yellow_cards: ::std::option::Option<u32>,
    timeouts: ::std::option::Option<u32>,
    timeout_time: ::std::option::Option<u32>,
    goalie: ::std::option::Option<u32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for SSL_Referee_TeamInfo {}

impl SSL_Referee_TeamInfo {
    pub fn new() -> SSL_Referee_TeamInfo {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static SSL_Referee_TeamInfo {
        static mut instance: ::protobuf::lazy::Lazy<SSL_Referee_TeamInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_Referee_TeamInfo,
        };
        unsafe {
            instance.get(|| {
                SSL_Referee_TeamInfo {
                    name: ::protobuf::SingularField::none(),
                    score: ::std::option::Option::None,
                    red_cards: ::std::option::Option::None,
                    yellow_card_times: ::std::vec::Vec::new(),
                    yellow_cards: ::std::option::Option::None,
                    timeouts: ::std::option::Option::None,
                    timeout_time: ::std::option::Option::None,
                    goalie: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        };
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required uint32 score = 2;

    pub fn clear_score(&mut self) {
        self.score = ::std::option::Option::None;
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: u32) {
        self.score = ::std::option::Option::Some(v);
    }

    pub fn get_score(&self) -> u32 {
        self.score.unwrap_or(0)
    }

    // required uint32 red_cards = 3;

    pub fn clear_red_cards(&mut self) {
        self.red_cards = ::std::option::Option::None;
    }

    pub fn has_red_cards(&self) -> bool {
        self.red_cards.is_some()
    }

    // Param is passed by value, moved
    pub fn set_red_cards(&mut self, v: u32) {
        self.red_cards = ::std::option::Option::Some(v);
    }

    pub fn get_red_cards(&self) -> u32 {
        self.red_cards.unwrap_or(0)
    }

    // repeated uint32 yellow_card_times = 4;

    pub fn clear_yellow_card_times(&mut self) {
        self.yellow_card_times.clear();
    }

    // Param is passed by value, moved
    pub fn set_yellow_card_times(&mut self, v: ::std::vec::Vec<u32>) {
        self.yellow_card_times = v;
    }

    // Mutable pointer to the field.
    pub fn mut_yellow_card_times(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.yellow_card_times
    }

    // Take field
    pub fn take_yellow_card_times(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.yellow_card_times, ::std::vec::Vec::new())
    }

    pub fn get_yellow_card_times(&self) -> &[u32] {
        &self.yellow_card_times
    }

    // required uint32 yellow_cards = 5;

    pub fn clear_yellow_cards(&mut self) {
        self.yellow_cards = ::std::option::Option::None;
    }

    pub fn has_yellow_cards(&self) -> bool {
        self.yellow_cards.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yellow_cards(&mut self, v: u32) {
        self.yellow_cards = ::std::option::Option::Some(v);
    }

    pub fn get_yellow_cards(&self) -> u32 {
        self.yellow_cards.unwrap_or(0)
    }

    // required uint32 timeouts = 6;

    pub fn clear_timeouts(&mut self) {
        self.timeouts = ::std::option::Option::None;
    }

    pub fn has_timeouts(&self) -> bool {
        self.timeouts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeouts(&mut self, v: u32) {
        self.timeouts = ::std::option::Option::Some(v);
    }

    pub fn get_timeouts(&self) -> u32 {
        self.timeouts.unwrap_or(0)
    }

    // required uint32 timeout_time = 7;

    pub fn clear_timeout_time(&mut self) {
        self.timeout_time = ::std::option::Option::None;
    }

    pub fn has_timeout_time(&self) -> bool {
        self.timeout_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout_time(&mut self, v: u32) {
        self.timeout_time = ::std::option::Option::Some(v);
    }

    pub fn get_timeout_time(&self) -> u32 {
        self.timeout_time.unwrap_or(0)
    }

    // required uint32 goalie = 8;

    pub fn clear_goalie(&mut self) {
        self.goalie = ::std::option::Option::None;
    }

    pub fn has_goalie(&self) -> bool {
        self.goalie.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goalie(&mut self, v: u32) {
        self.goalie = ::std::option::Option::Some(v);
    }

    pub fn get_goalie(&self) -> u32 {
        self.goalie.unwrap_or(0)
    }
}

impl ::protobuf::Message for SSL_Referee_TeamInfo {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        };
        if self.score.is_none() {
            return false;
        };
        if self.red_cards.is_none() {
            return false;
        };
        if self.yellow_cards.is_none() {
            return false;
        };
        if self.timeouts.is_none() {
            return false;
        };
        if self.timeout_time.is_none() {
            return false;
        };
        if self.goalie.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.score = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.red_cards = ::std::option::Option::Some(tmp);
                },
                4 => {
                    try!(::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.yellow_card_times));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.yellow_cards = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.timeouts = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.timeout_time = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.goalie = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.name.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in self.score.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.red_cards.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if !self.yellow_card_times.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(4, &self.yellow_card_times);
        };
        for value in self.yellow_cards.iter() {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.timeouts.iter() {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.timeout_time.iter() {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.goalie.iter() {
            my_size += ::protobuf::rt::value_size(8, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.name.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.score {
            try!(os.write_uint32(2, v));
        };
        if let Some(v) = self.red_cards {
            try!(os.write_uint32(3, v));
        };
        if !self.yellow_card_times.is_empty() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            // TODO: Data size is computed again, it should be cached
            try!(os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.yellow_card_times)));
            for v in self.yellow_card_times.iter() {
                try!(os.write_uint32_no_tag(*v));
            };
        };
        if let Some(v) = self.yellow_cards {
            try!(os.write_uint32(5, v));
        };
        if let Some(v) = self.timeouts {
            try!(os.write_uint32(6, v));
        };
        if let Some(v) = self.timeout_time {
            try!(os.write_uint32(7, v));
        };
        if let Some(v) = self.goalie {
            try!(os.write_uint32(8, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<SSL_Referee_TeamInfo>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for SSL_Referee_TeamInfo {
    fn new() -> SSL_Referee_TeamInfo {
        SSL_Referee_TeamInfo::new()
    }

    fn descriptor_static(_: ::std::option::Option<SSL_Referee_TeamInfo>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name",
                    SSL_Referee_TeamInfo::has_name,
                    SSL_Referee_TeamInfo::get_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "score",
                    SSL_Referee_TeamInfo::has_score,
                    SSL_Referee_TeamInfo::get_score,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "red_cards",
                    SSL_Referee_TeamInfo::has_red_cards,
                    SSL_Referee_TeamInfo::get_red_cards,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_u32_accessor(
                    "yellow_card_times",
                    SSL_Referee_TeamInfo::get_yellow_card_times,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "yellow_cards",
                    SSL_Referee_TeamInfo::has_yellow_cards,
                    SSL_Referee_TeamInfo::get_yellow_cards,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "timeouts",
                    SSL_Referee_TeamInfo::has_timeouts,
                    SSL_Referee_TeamInfo::get_timeouts,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "timeout_time",
                    SSL_Referee_TeamInfo::has_timeout_time,
                    SSL_Referee_TeamInfo::get_timeout_time,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "goalie",
                    SSL_Referee_TeamInfo::has_goalie,
                    SSL_Referee_TeamInfo::get_goalie,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_Referee_TeamInfo>(
                    "SSL_Referee_TeamInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for SSL_Referee_TeamInfo {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_score();
        self.clear_red_cards();
        self.clear_yellow_card_times();
        self.clear_yellow_cards();
        self.clear_timeouts();
        self.clear_timeout_time();
        self.clear_goalie();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for SSL_Referee_TeamInfo {
    fn eq(&self, other: &SSL_Referee_TeamInfo) -> bool {
        self.name == other.name &&
        self.score == other.score &&
        self.red_cards == other.red_cards &&
        self.yellow_card_times == other.yellow_card_times &&
        self.yellow_cards == other.yellow_cards &&
        self.timeouts == other.timeouts &&
        self.timeout_time == other.timeout_time &&
        self.goalie == other.goalie &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for SSL_Referee_TeamInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SSL_Referee_Stage {
    NORMAL_FIRST_HALF_PRE = 0,
    NORMAL_FIRST_HALF = 1,
    NORMAL_HALF_TIME = 2,
    NORMAL_SECOND_HALF_PRE = 3,
    NORMAL_SECOND_HALF = 4,
    EXTRA_TIME_BREAK = 5,
    EXTRA_FIRST_HALF_PRE = 6,
    EXTRA_FIRST_HALF = 7,
    EXTRA_HALF_TIME = 8,
    EXTRA_SECOND_HALF_PRE = 9,
    EXTRA_SECOND_HALF = 10,
    PENALTY_SHOOTOUT_BREAK = 11,
    PENALTY_SHOOTOUT = 12,
    POST_GAME = 13,
}

impl ::protobuf::ProtobufEnum for SSL_Referee_Stage {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SSL_Referee_Stage> {
        match value {
            0 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_FIRST_HALF_PRE),
            1 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_FIRST_HALF),
            2 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_HALF_TIME),
            3 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_SECOND_HALF_PRE),
            4 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_SECOND_HALF),
            5 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_TIME_BREAK),
            6 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_FIRST_HALF_PRE),
            7 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_FIRST_HALF),
            8 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_HALF_TIME),
            9 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_SECOND_HALF_PRE),
            10 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_SECOND_HALF),
            11 => ::std::option::Option::Some(SSL_Referee_Stage::PENALTY_SHOOTOUT_BREAK),
            12 => ::std::option::Option::Some(SSL_Referee_Stage::PENALTY_SHOOTOUT),
            13 => ::std::option::Option::Some(SSL_Referee_Stage::POST_GAME),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SSL_Referee_Stage] = &[
            SSL_Referee_Stage::NORMAL_FIRST_HALF_PRE,
            SSL_Referee_Stage::NORMAL_FIRST_HALF,
            SSL_Referee_Stage::NORMAL_HALF_TIME,
            SSL_Referee_Stage::NORMAL_SECOND_HALF_PRE,
            SSL_Referee_Stage::NORMAL_SECOND_HALF,
            SSL_Referee_Stage::EXTRA_TIME_BREAK,
            SSL_Referee_Stage::EXTRA_FIRST_HALF_PRE,
            SSL_Referee_Stage::EXTRA_FIRST_HALF,
            SSL_Referee_Stage::EXTRA_HALF_TIME,
            SSL_Referee_Stage::EXTRA_SECOND_HALF_PRE,
            SSL_Referee_Stage::EXTRA_SECOND_HALF,
            SSL_Referee_Stage::PENALTY_SHOOTOUT_BREAK,
            SSL_Referee_Stage::PENALTY_SHOOTOUT,
            SSL_Referee_Stage::POST_GAME,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<SSL_Referee_Stage>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("SSL_Referee_Stage", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SSL_Referee_Stage {
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SSL_Referee_Command {
    HALT = 0,
    STOP = 1,
    NORMAL_START = 2,
    FORCE_START = 3,
    PREPARE_KICKOFF_YELLOW = 4,
    PREPARE_KICKOFF_BLUE = 5,
    PREPARE_PENALTY_YELLOW = 6,
    PREPARE_PENALTY_BLUE = 7,
    DIRECT_FREE_YELLOW = 8,
    DIRECT_FREE_BLUE = 9,
    INDIRECT_FREE_YELLOW = 10,
    INDIRECT_FREE_BLUE = 11,
    TIMEOUT_YELLOW = 12,
    TIMEOUT_BLUE = 13,
    GOAL_YELLOW = 14,
    GOAL_BLUE = 15,
}

impl ::protobuf::ProtobufEnum for SSL_Referee_Command {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SSL_Referee_Command> {
        match value {
            0 => ::std::option::Option::Some(SSL_Referee_Command::HALT),
            1 => ::std::option::Option::Some(SSL_Referee_Command::STOP),
            2 => ::std::option::Option::Some(SSL_Referee_Command::NORMAL_START),
            3 => ::std::option::Option::Some(SSL_Referee_Command::FORCE_START),
            4 => ::std::option::Option::Some(SSL_Referee_Command::PREPARE_KICKOFF_YELLOW),
            5 => ::std::option::Option::Some(SSL_Referee_Command::PREPARE_KICKOFF_BLUE),
            6 => ::std::option::Option::Some(SSL_Referee_Command::PREPARE_PENALTY_YELLOW),
            7 => ::std::option::Option::Some(SSL_Referee_Command::PREPARE_PENALTY_BLUE),
            8 => ::std::option::Option::Some(SSL_Referee_Command::DIRECT_FREE_YELLOW),
            9 => ::std::option::Option::Some(SSL_Referee_Command::DIRECT_FREE_BLUE),
            10 => ::std::option::Option::Some(SSL_Referee_Command::INDIRECT_FREE_YELLOW),
            11 => ::std::option::Option::Some(SSL_Referee_Command::INDIRECT_FREE_BLUE),
            12 => ::std::option::Option::Some(SSL_Referee_Command::TIMEOUT_YELLOW),
            13 => ::std::option::Option::Some(SSL_Referee_Command::TIMEOUT_BLUE),
            14 => ::std::option::Option::Some(SSL_Referee_Command::GOAL_YELLOW),
            15 => ::std::option::Option::Some(SSL_Referee_Command::GOAL_BLUE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SSL_Referee_Command] = &[
            SSL_Referee_Command::HALT,
            SSL_Referee_Command::STOP,
            SSL_Referee_Command::NORMAL_START,
            SSL_Referee_Command::FORCE_START,
            SSL_Referee_Command::PREPARE_KICKOFF_YELLOW,
            SSL_Referee_Command::PREPARE_KICKOFF_BLUE,
            SSL_Referee_Command::PREPARE_PENALTY_YELLOW,
            SSL_Referee_Command::PREPARE_PENALTY_BLUE,
            SSL_Referee_Command::DIRECT_FREE_YELLOW,
            SSL_Referee_Command::DIRECT_FREE_BLUE,
            SSL_Referee_Command::INDIRECT_FREE_YELLOW,
            SSL_Referee_Command::INDIRECT_FREE_BLUE,
            SSL_Referee_Command::TIMEOUT_YELLOW,
            SSL_Referee_Command::TIMEOUT_BLUE,
            SSL_Referee_Command::GOAL_YELLOW,
            SSL_Referee_Command::GOAL_BLUE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<SSL_Referee_Command>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("SSL_Referee_Command", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SSL_Referee_Command {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
    0xdd, 0x08, 0x0a, 0x0b, 0x53, 0x53, 0x4c, 0x5f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x12,
    0x18, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
    0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61,
    0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x52,
    0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x0f,
    0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18,
    0x03, 0x20, 0x01, 0x28, 0x11, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
    0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x52, 0x65, 0x66,
    0x65, 0x72, 0x65, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x0f,
    0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
    0x05, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x19, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
    0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04,
    0x12, 0x25, 0x0a, 0x06, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b,
    0x32, 0x15, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x54,
    0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18,
    0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x53, 0x4c, 0x5f, 0x52, 0x65, 0x66, 0x65,
    0x72, 0x65, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xa7, 0x01, 0x0a,
    0x08, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
    0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x12, 0x0d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
    0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x11, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61,
    0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x1d, 0x0a, 0x11, 0x79, 0x65, 0x6c,
    0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04,
    0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c,
    0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x10,
    0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d,
    0x12, 0x14, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
    0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x12, 0x0e, 0x0a, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65,
    0x18, 0x08, 0x20, 0x02, 0x28, 0x0d, 0x22, 0xd1, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65,
    0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
    0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e,
    0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46,
    0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4c,
    0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x52, 0x4d,
    0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50,
    0x52, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53,
    0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
    0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b,
    0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x46, 0x49, 0x52, 0x53,
    0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
    0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46,
    0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x48, 0x41, 0x4c, 0x46,
    0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x54, 0x52, 0x41,
    0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45,
    0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x4f,
    0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x4e,
    0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x52,
    0x45, 0x41, 0x4b, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59,
    0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x50,
    0x4f, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x0d, 0x22, 0xd2, 0x02, 0x0a, 0x07, 0x43,
    0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x00,
    0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f,
    0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
    0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a,
    0x16, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x46, 0x46,
    0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45,
    0x50, 0x41, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x5f, 0x42, 0x4c, 0x55,
    0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x50,
    0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x06, 0x12,
    0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c,
    0x54, 0x59, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x52,
    0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10,
    0x08, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45,
    0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x44, 0x49, 0x52,
    0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10,
    0x0a, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52,
    0x45, 0x45, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d,
    0x45, 0x4f, 0x55, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x0c, 0x12, 0x10, 0x0a,
    0x0c, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0d, 0x12,
    0x0f, 0x0a, 0x0b, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x0e,
    0x12, 0x0d, 0x0a, 0x09, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x0f, 0x4a,
    0xec, 0x2f, 0x0a, 0x07, 0x12, 0x05, 0x01, 0x00, 0x86, 0x01, 0x01, 0x0a, 0x3e, 0x0a, 0x02, 0x04,
    0x00, 0x12, 0x05, 0x01, 0x00, 0x86, 0x01, 0x01, 0x1a, 0x31, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20,
    0x55, 0x44, 0x50, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
    0x69, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65,
    0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x00, 0x01, 0x12, 0x03, 0x01, 0x08, 0x13, 0x0a, 0x72, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x04, 0x08, 0x2d, 0x1a, 0x65, 0x20, 0x54, 0x68, 0x65, 0x20, 0x55, 0x4e, 0x49, 0x58, 0x20,
    0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x65,
    0x6e, 0x74, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f,
    0x6e, 0x64, 0x73, 0x2e, 0x0a, 0x20, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x20, 0x62, 0x79, 0x20,
    0x31, 0x2c, 0x30, 0x30, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74,
    0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x04, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x05, 0x12, 0x03, 0x04, 0x11, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x04, 0x18, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x04, 0x2b, 0x2c, 0x0a, 0x3a, 0x0a, 0x04, 0x04, 0x00, 0x04, 0x00, 0x12, 0x04, 0x07, 0x08, 0x2c,
    0x09, 0x1a, 0x2c, 0x20, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x22, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x22, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04, 0x00, 0x01, 0x12, 0x03, 0x07, 0x0d, 0x12, 0x0a, 0x82, 0x01,
    0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x0b, 0x10, 0x2a, 0x1a, 0x73, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x69,
    0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74,
    0x2e, 0x0a, 0x20, 0x41, 0x20, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x20, 0x69, 0x73, 0x20,
    0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x73, 0x74, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
    0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0b,
    0x10, 0x25, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x0b,
    0x28, 0x29, 0x0a, 0x45, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x0d, 0x10,
    0x26, 0x1a, 0x36, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x68, 0x61,
    0x6c, 0x66, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
    0x20, 0x67, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x68, 0x61,
    0x6c, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0d, 0x10, 0x21, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x0d, 0x24, 0x25, 0x0a, 0x3b, 0x0a, 0x06, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x02, 0x12, 0x03, 0x0f, 0x10, 0x25, 0x1a, 0x2c, 0x20, 0x48, 0x61, 0x6c, 0x66, 0x20,
    0x74, 0x69, 0x6d, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x66, 0x69, 0x72,
    0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x68, 0x61,
    0x6c, 0x76, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x0f, 0x10, 0x20, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02,
    0x02, 0x12, 0x03, 0x0f, 0x23, 0x24, 0x0a, 0x83, 0x01, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x03, 0x12, 0x03, 0x13, 0x10, 0x2b, 0x1a, 0x74, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63,
    0x6f, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75,
    0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x0a, 0x20, 0x41, 0x20, 0x6b,
    0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x20, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
    0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61,
    0x67, 0x65, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x20,
    0x65, 0x6e, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x4f,
    0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x13, 0x10, 0x26, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x13, 0x29, 0x2a, 0x0a, 0x45, 0x0a, 0x06,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x15, 0x10, 0x27, 0x1a, 0x36, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x67, 0x61, 0x6d, 0x65,
    0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x74, 0x69, 0x6d,
    0x65, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03,
    0x15, 0x10, 0x22, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03,
    0x15, 0x25, 0x26, 0x0a, 0x2d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x17,
    0x10, 0x25, 0x1a, 0x1e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x20, 0x62,
    0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x17,
    0x10, 0x20, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x02, 0x12, 0x03, 0x17,
    0x23, 0x24, 0x0a, 0x91, 0x01, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x1b,
    0x10, 0x29, 0x1a, 0x81, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20,
    0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x20, 0x74, 0x69,
    0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73,
    0x74, 0x61, 0x72, 0x74, 0x2e, 0x0a, 0x20, 0x41, 0x20, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66,
    0x20, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69,
    0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x0a, 0x20, 0x54,
    0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x77,
    0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53,
    0x54, 0x41, 0x52, 0x54, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06,
    0x01, 0x12, 0x03, 0x1b, 0x10, 0x24, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06,
    0x02, 0x12, 0x03, 0x1b, 0x27, 0x28, 0x0a, 0x2e, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x07,
    0x12, 0x03, 0x1d, 0x10, 0x25, 0x1a, 0x1f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73,
    0x74, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x20,
    0x74, 0x69, 0x6d, 0x65, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x07,
    0x01, 0x12, 0x03, 0x1d, 0x10, 0x20, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x07,
    0x02, 0x12, 0x03, 0x1d, 0x23, 0x24, 0x0a, 0x41, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x08,
    0x12, 0x03, 0x1f, 0x10, 0x24, 0x1a, 0x32, 0x20, 0x48, 0x61, 0x6c, 0x66, 0x20, 0x74, 0x69, 0x6d,
    0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61,
    0x20, 0x68, 0x61, 0x6c, 0x76, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x08, 0x01, 0x12, 0x03, 0x1f, 0x10, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x08, 0x02, 0x12, 0x03, 0x1f, 0x22, 0x23, 0x0a, 0x92, 0x01, 0x0a, 0x06, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x09, 0x12, 0x03, 0x23, 0x10, 0x2a, 0x1a, 0x82, 0x01, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66, 0x20,
    0x65, 0x78, 0x74, 0x72, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62,
    0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x0a, 0x20, 0x41,
    0x20, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x20, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c,
    0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73,
    0x74, 0x61, 0x67, 0x65, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x20, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x2e, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x09, 0x01, 0x12, 0x03, 0x23, 0x10, 0x25, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x09, 0x02, 0x12, 0x03, 0x23, 0x28, 0x29, 0x0a, 0x2f,
    0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0a, 0x12, 0x03, 0x25, 0x10, 0x27, 0x1a, 0x20, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20,
    0x6f, 0x66, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x25, 0x10, 0x21, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0a, 0x02, 0x12, 0x03, 0x25, 0x24, 0x26, 0x0a,
    0x33, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0b, 0x12, 0x03, 0x27, 0x10, 0x2c, 0x1a, 0x24,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72,
    0x65, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x6f,
    0x75, 0x74, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0b, 0x01, 0x12,
    0x03, 0x27, 0x10, 0x26, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0b, 0x02, 0x12,
    0x03, 0x27, 0x29, 0x2b, 0x0a, 0x26, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0c, 0x12, 0x03,
    0x29, 0x10, 0x26, 0x1a, 0x17, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
    0x79, 0x20, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x29, 0x10, 0x20, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x0c, 0x02, 0x12, 0x03, 0x29, 0x23, 0x25, 0x0a, 0x22, 0x0a, 0x06,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x0d, 0x12, 0x03, 0x2b, 0x10, 0x1f, 0x1a, 0x13, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x2e, 0x0a,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0d, 0x01, 0x12, 0x03, 0x2b, 0x10, 0x19,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0d, 0x02, 0x12, 0x03, 0x2b, 0x1c, 0x1e,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x2d, 0x08, 0x21, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x2d, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x2d, 0x11, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x2d, 0x17, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03,
    0x12, 0x03, 0x2d, 0x1f, 0x20, 0x0a, 0xd9, 0x02, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03,
    0x3c, 0x08, 0x2c, 0x1a, 0xcb, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
    0x72, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
    0x73, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
    0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3b, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x72, 0x65, 0x73, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x3a, 0x0a, 0x20, 0x4e, 0x4f,
    0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x0a,
    0x20, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54, 0x49, 0x4d,
    0x45, 0x0a, 0x20, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
    0x5f, 0x48, 0x41, 0x4c, 0x46, 0x0a, 0x20, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d,
    0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x0a, 0x20, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x46,
    0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x0a, 0x20, 0x45, 0x58, 0x54, 0x52, 0x41,
    0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x0a, 0x20, 0x45, 0x58, 0x54, 0x52,
    0x41, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x0a, 0x20, 0x50,
    0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x5f,
    0x42, 0x52, 0x45, 0x41, 0x4b, 0x0a, 0x0a, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
    0x74, 0x61, 0x67, 0x65, 0x20, 0x72, 0x75, 0x6e, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x69,
    0x74, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d,
    0x65, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x0a, 0x20, 0x62,
    0x65, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x20, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x3c, 0x08, 0x10, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x05, 0x12, 0x03, 0x3c, 0x11, 0x17, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x3c, 0x18, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x3c, 0x2a, 0x2b, 0x0a, 0x41, 0x0a, 0x04, 0x04, 0x00, 0x04,
    0x01, 0x12, 0x04, 0x3f, 0x08, 0x62, 0x09, 0x1a, 0x33, 0x20, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20,
    0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x66, 0x69, 0x6e, 0x65, 0x22, 0x20, 0x73,
    0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6f, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x04, 0x01, 0x01, 0x12, 0x03, 0x3f, 0x0d, 0x14, 0x0a, 0x3a, 0x0a, 0x06, 0x04, 0x00,
    0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x41, 0x10, 0x19, 0x1a, 0x2b, 0x20, 0x41, 0x6c, 0x6c, 0x20,
    0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x63, 0x6f,
    0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6c, 0x79, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x20, 0x6d, 0x6f,
    0x76, 0x69, 0x6e, 0x67, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x41, 0x10, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x00,
    0x02, 0x12, 0x03, 0x41, 0x17, 0x18, 0x0a, 0x36, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x01,
    0x12, 0x03, 0x43, 0x10, 0x19, 0x1a, 0x27, 0x20, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x20, 0x6d,
    0x75, 0x73, 0x74, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x20, 0x35, 0x30, 0x20, 0x63, 0x6d, 0x20, 0x66,
    0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x2e, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x43, 0x10, 0x14, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x43, 0x17, 0x18, 0x0a, 0x40,
    0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x45, 0x10, 0x21, 0x1a, 0x31, 0x20,
    0x41, 0x20, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x6b, 0x69, 0x63, 0x6b, 0x6f,
    0x66, 0x66, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x6d, 0x61,
    0x79, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x62, 0x65, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x2e, 0x0a,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x45, 0x10, 0x1c,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x45, 0x1f, 0x20,
    0x0a, 0x3e, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x03, 0x12, 0x03, 0x47, 0x10, 0x20, 0x1a,
    0x2f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x64, 0x72,
    0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x0a,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x47, 0x10, 0x1b,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x03, 0x02, 0x12, 0x03, 0x47, 0x1e, 0x1f,
    0x0a, 0x40, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x04, 0x12, 0x03, 0x49, 0x10, 0x2b, 0x1a,
    0x31, 0x20, 0x54, 0x68, 0x65, 0x20, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x65, 0x61,
    0x6d, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20,
    0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x04, 0x01, 0x12, 0x03, 0x49,
    0x10, 0x26, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x04, 0x02, 0x12, 0x03, 0x49,
    0x29, 0x2a, 0x0a, 0x3e, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x05, 0x12, 0x03, 0x4b, 0x10,
    0x29, 0x1a, 0x2f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x65, 0x61,
    0x6d, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20,
    0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x05, 0x01, 0x12, 0x03, 0x4b,
    0x10, 0x24, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x05, 0x02, 0x12, 0x03, 0x4b,
    0x27, 0x28, 0x0a, 0x40, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x06, 0x12, 0x03, 0x4d, 0x10,
    0x2b, 0x1a, 0x31, 0x20, 0x54, 0x68, 0x65, 0x20, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74,
    0x65, 0x61, 0x6d, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x74,
    0x6f, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x06, 0x01, 0x12,
    0x03, 0x4d, 0x10, 0x26, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x06, 0x02, 0x12,
    0x03, 0x4d, 0x29, 0x2a, 0x0a, 0x3e, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x07, 0x12, 0x03,
    0x4f, 0x10, 0x29, 0x1a, 0x2f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x75, 0x65, 0x20, 0x74,
    0x65, 0x61, 0x6d, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x74,
    0x6f, 0x20, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x07, 0x01, 0x12,
    0x03, 0x4f, 0x10, 0x24, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x07, 0x02, 0x12,
    0x03, 0x4f, 0x27, 0x28, 0x0a, 0x3d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x08, 0x12, 0x03,
    0x51, 0x10, 0x27, 0x1a, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
    0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x61,
    0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x6b, 0x69, 0x63,
    0x6b, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x08, 0x01, 0x12, 0x03,
    0x51, 0x10, 0x22, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x08, 0x02, 0x12, 0x03,
    0x51, 0x25, 0x26, 0x0a, 0x3b, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x09, 0x12, 0x03, 0x53,
    0x10, 0x25, 0x1a, 0x2c, 0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x65,
    0x61, 0x6d, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x20, 0x64, 0x69,
    0x72, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x6b, 0x69, 0x63, 0x6b, 0x2e, 0x0a,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x09, 0x01, 0x12, 0x03, 0x53, 0x10, 0x20,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x09, 0x02, 0x12, 0x03, 0x53, 0x23, 0x24,
    0x0a, 0x40, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0a, 0x12, 0x03, 0x55, 0x10, 0x2a, 0x1a,
    0x31, 0x20, 0x54, 0x68, 0x65, 0x20, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x65, 0x61,
    0x6d, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e,
    0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x6b, 0x69, 0x63, 0x6b,
    0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x55,
    0x10, 0x24, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0a, 0x02, 0x12, 0x03, 0x55,
    0x27, 0x29, 0x0a, 0x3e, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0b, 0x12, 0x03, 0x57, 0x10,
    0x28, 0x1a, 0x2f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x65, 0x61,
    0x6d, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e,
    0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x6b, 0x69, 0x63, 0x6b,
    0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x57,
    0x10, 0x22, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0b, 0x02, 0x12, 0x03, 0x57,
    0x25, 0x27, 0x0a, 0x3b, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0c, 0x12, 0x03, 0x59, 0x10,
    0x24, 0x1a, 0x2c, 0x20, 0x54, 0x68, 0x65, 0x20, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74,
    0x65, 0x61, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
    0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x59, 0x10, 0x1e, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0c, 0x02, 0x12, 0x03, 0x59, 0x21, 0x23, 0x0a,
    0x39, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x0d, 0x12, 0x03, 0x5b, 0x10, 0x22, 0x1a, 0x2a,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x69,
    0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x61,
    0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x01, 0x02, 0x0d, 0x01, 0x12, 0x03, 0x5b, 0x10, 0x1c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x01, 0x02, 0x0d, 0x02, 0x12, 0x03, 0x5b, 0x1f, 0x21, 0x0a, 0x7c, 0x0a, 0x06, 0x04, 0x00,
    0x04, 0x01, 0x02, 0x0e, 0x12, 0x03, 0x5f, 0x10, 0x21, 0x1a, 0x6d, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6a, 0x75, 0x73, 0x74,
    0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x61, 0x6c, 0x2e, 0x0a,
    0x20, 0x46, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x0a, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x72, 0x75, 0x6c, 0x65,
    0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0x74, 0x65,
    0x61, 0x6d, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x74, 0x72, 0x65, 0x61, 0x74, 0x20, 0x61,
    0x73, 0x20, 0x53, 0x54, 0x4f, 0x50, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01,
    0x02, 0x0e, 0x01, 0x12, 0x03, 0x5f, 0x10, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01,
    0x02, 0x0e, 0x02, 0x12, 0x03, 0x5f, 0x1e, 0x20, 0x0a, 0x32, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01,
    0x02, 0x0f, 0x12, 0x03, 0x61, 0x10, 0x1f, 0x1a, 0x23, 0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x6c,
    0x75, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x73, 0x63, 0x6f,
    0x72, 0x65, 0x64, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x61, 0x6c, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x01, 0x02, 0x0f, 0x01, 0x12, 0x03, 0x61, 0x10, 0x19, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x01, 0x02, 0x0f, 0x02, 0x12, 0x03, 0x61, 0x1c, 0x1e, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x63, 0x08, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x03, 0x04, 0x12, 0x03, 0x63, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x06,
    0x12, 0x03, 0x63, 0x11, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03,
    0x63, 0x19, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x63, 0x23,
    0x24, 0x0a, 0x46, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x66, 0x08, 0x2c, 0x1a, 0x39,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x63,
    0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x20, 0x73,
    0x69, 0x6e, 0x63, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x20, 0x28, 0x6d, 0x6f,
    0x64, 0x20, 0x32, 0x5e, 0x33, 0x32, 0x29, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x04, 0x04, 0x12, 0x03, 0x66, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x05,
    0x12, 0x03, 0x66, 0x11, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03,
    0x66, 0x18, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x66, 0x2a,
    0x2b, 0x0a, 0x9b, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x6a, 0x08, 0x2e, 0x1a,
    0x8d, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x55, 0x4e, 0x49, 0x58, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x61, 0x73, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65,
    0x64, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
    0x64, 0x73, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
    0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x77, 0x68, 0x65,
    0x6e, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20,
    0x69, 0x73, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6f,
    0x6e, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x04, 0x12, 0x03, 0x6a, 0x08, 0x10, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x05, 0x05, 0x12, 0x03, 0x6a, 0x11, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x6a, 0x18, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x05, 0x03, 0x12, 0x03, 0x6a, 0x2c, 0x2d, 0x0a, 0x31, 0x0a, 0x04, 0x04, 0x00, 0x03, 0x00, 0x12,
    0x05, 0x6d, 0x08, 0x81, 0x01, 0x09, 0x1a, 0x22, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e,
    0x67, 0x6c, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x03, 0x00, 0x01, 0x12, 0x03, 0x6d, 0x10, 0x18, 0x0a, 0x53, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00,
    0x02, 0x00, 0x12, 0x03, 0x6f, 0x10, 0x29, 0x1a, 0x44, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x65,
    0x61, 0x6d, 0x27, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x28, 0x65, 0x6d, 0x70, 0x74, 0x79,
    0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x66, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
    0x74, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65,
    0x64, 0x20, 0x61, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x29, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x6f, 0x10, 0x18, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x6f, 0x19, 0x1f, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x6f, 0x20, 0x24, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x6f, 0x27, 0x28, 0x0a, 0x58, 0x0a,
    0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01, 0x12, 0x03, 0x71, 0x10, 0x2a, 0x1a, 0x49, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x6f, 0x61,
    0x6c, 0x73, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x6f, 0x72,
    0x6d, 0x61, 0x6c, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x76, 0x65,
    0x72, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02,
    0x01, 0x04, 0x12, 0x03, 0x71, 0x10, 0x18, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02,
    0x01, 0x05, 0x12, 0x03, 0x71, 0x19, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x71, 0x20, 0x25, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x71, 0x28, 0x29, 0x0a, 0x5c, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02,
    0x02, 0x12, 0x03, 0x73, 0x10, 0x2e, 0x1a, 0x4d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d,
    0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x64, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73,
    0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
    0x65, 0x61, 0x6d, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65,
    0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67,
    0x61, 0x6d, 0x65, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x04,
    0x12, 0x03, 0x73, 0x10, 0x18, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x05,
    0x12, 0x03, 0x73, 0x19, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x01,
    0x12, 0x03, 0x73, 0x20, 0x29, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x03,
    0x12, 0x03, 0x73, 0x2c, 0x2d, 0x0a, 0xd7, 0x01, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03,
    0x12, 0x03, 0x77, 0x10, 0x44, 0x1a, 0xc7, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f,
    0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x28, 0x69, 0x6e, 0x20,
    0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x29, 0x20, 0x6c, 0x65,
    0x66, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
    0x77, 0x20, 0x63, 0x61, 0x72, 0x64, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x20, 0x74, 0x6f,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x0a, 0x20, 0x49, 0x66, 0x20, 0x6e,
    0x6f, 0x20, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73, 0x20, 0x61,
    0x72, 0x65, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x65, 0x6c, 0x65,
    0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x0a, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73,
    0x65, 0x2c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x72, 0x64,
    0x65, 0x72, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65,
    0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x77, 0x10, 0x18, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x05, 0x12, 0x03, 0x77, 0x19, 0x1f, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x77, 0x20, 0x31, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x77, 0x34, 0x35, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x08, 0x12, 0x03, 0x77, 0x36, 0x43, 0x0a,
    0x11, 0x0a, 0x0a, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x77,
    0x37, 0x42, 0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x08, 0xe7, 0x07, 0x00,
    0x02, 0x12, 0x03, 0x77, 0x37, 0x3d, 0x0a, 0x13, 0x0a, 0x0c, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03,
    0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x77, 0x37, 0x3d, 0x0a, 0x14, 0x0a, 0x0d, 0x04,
    0x00, 0x03, 0x00, 0x02, 0x03, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x77, 0x37,
    0x3d, 0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x08, 0xe7, 0x07, 0x00, 0x03,
    0x12, 0x03, 0x77, 0x3e, 0x42, 0x0a, 0x4a, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x04, 0x12,
    0x03, 0x79, 0x10, 0x31, 0x1a, 0x3b, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c,
    0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
    0x77, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73, 0x20, 0x65, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73, 0x73,
    0x75, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x2e,
    0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x04, 0x04, 0x12, 0x03, 0x79, 0x10,
    0x18, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x04, 0x05, 0x12, 0x03, 0x79, 0x19,
    0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x79, 0x20,
    0x2c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x79, 0x2f,
    0x30, 0x0a, 0x77, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x05, 0x12, 0x03, 0x7c, 0x10, 0x2d,
    0x1a, 0x68, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
    0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74,
    0x65, 0x61, 0x6d, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x63, 0x61,
    0x6c, 0x6c, 0x2e, 0x0a, 0x20, 0x49, 0x66, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d,
    0x65, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6e, 0x6f, 0x77, 0x2c, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x73, 0x20,
    0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x00, 0x02, 0x05, 0x04, 0x12, 0x03, 0x7c, 0x10, 0x18, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x00, 0x02, 0x05, 0x05, 0x12, 0x03, 0x7c, 0x19, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x7c, 0x20, 0x28, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x7c, 0x2b, 0x2c, 0x0a, 0x49, 0x0a, 0x06, 0x04, 0x00,
    0x03, 0x00, 0x02, 0x06, 0x12, 0x03, 0x7e, 0x10, 0x31, 0x1a, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
    0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
    0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x63, 0x61, 0x6e, 0x20,
    0x75, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x06, 0x04,
    0x12, 0x03, 0x7e, 0x10, 0x18, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x06, 0x05,
    0x12, 0x03, 0x7e, 0x19, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x06, 0x01,
    0x12, 0x03, 0x7e, 0x20, 0x2c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x06, 0x03,
    0x12, 0x03, 0x7e, 0x2f, 0x30, 0x0a, 0x3b, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x07, 0x12,
    0x04, 0x80, 0x01, 0x10, 0x2b, 0x1a, 0x2b, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x74, 0x74,
    0x65, 0x72, 0x6e, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x74, 0x65, 0x61, 0x6d, 0x27, 0x73, 0x20, 0x67, 0x6f, 0x61, 0x6c, 0x69, 0x65,
    0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x07, 0x04, 0x12, 0x04, 0x80,
    0x01, 0x10, 0x18, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x07, 0x05, 0x12, 0x04,
    0x80, 0x01, 0x19, 0x1f, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x07, 0x01, 0x12,
    0x04, 0x80, 0x01, 0x20, 0x26, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x07, 0x03,
    0x12, 0x04, 0x80, 0x01, 0x29, 0x2a, 0x0a, 0x30, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x06, 0x12, 0x04,
    0x84, 0x01, 0x08, 0x25, 0x1a, 0x22, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x77, 0x6f,
    0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06,
    0x04, 0x12, 0x04, 0x84, 0x01, 0x08, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x06,
    0x12, 0x04, 0x84, 0x01, 0x11, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x01, 0x12,
    0x04, 0x84, 0x01, 0x1a, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x03, 0x12, 0x04,
    0x84, 0x01, 0x23, 0x24, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x07, 0x12, 0x04, 0x85, 0x01,
    0x08, 0x23, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x04, 0x12, 0x04, 0x85, 0x01, 0x08,
    0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x06, 0x12, 0x04, 0x85, 0x01, 0x11, 0x19,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x01, 0x12, 0x04, 0x85, 0x01, 0x1a, 0x1e, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x03, 0x12, 0x04, 0x85, 0x01, 0x21, 0x22,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
